// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: port-service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortInfoClient is the client API for PortInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortInfoClient interface {
	GetPortInfo(ctx context.Context, in *PortInfoRequest, opts ...grpc.CallOption) (PortInfo_GetPortInfoClient, error)
}

type portInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPortInfoClient(cc grpc.ClientConnInterface) PortInfoClient {
	return &portInfoClient{cc}
}

func (c *portInfoClient) GetPortInfo(ctx context.Context, in *PortInfoRequest, opts ...grpc.CallOption) (PortInfo_GetPortInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortInfo_ServiceDesc.Streams[0], "/PortInfo/GetPortInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &portInfoGetPortInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortInfo_GetPortInfoClient interface {
	Recv() (*PortInfoResponse, error)
	grpc.ClientStream
}

type portInfoGetPortInfoClient struct {
	grpc.ClientStream
}

func (x *portInfoGetPortInfoClient) Recv() (*PortInfoResponse, error) {
	m := new(PortInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortInfoServer is the server API for PortInfo service.
// All implementations must embed UnimplementedPortInfoServer
// for forward compatibility
type PortInfoServer interface {
	GetPortInfo(*PortInfoRequest, PortInfo_GetPortInfoServer) error
	mustEmbedUnimplementedPortInfoServer()
}

// UnimplementedPortInfoServer must be embedded to have forward compatible implementations.
type UnimplementedPortInfoServer struct {
}

func (UnimplementedPortInfoServer) GetPortInfo(*PortInfoRequest, PortInfo_GetPortInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPortInfo not implemented")
}
func (UnimplementedPortInfoServer) mustEmbedUnimplementedPortInfoServer() {}

// UnsafePortInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortInfoServer will
// result in compilation errors.
type UnsafePortInfoServer interface {
	mustEmbedUnimplementedPortInfoServer()
}

func RegisterPortInfoServer(s grpc.ServiceRegistrar, srv PortInfoServer) {
	s.RegisterService(&PortInfo_ServiceDesc, srv)
}

func _PortInfo_GetPortInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortInfoServer).GetPortInfo(m, &portInfoGetPortInfoServer{stream})
}

type PortInfo_GetPortInfoServer interface {
	Send(*PortInfoResponse) error
	grpc.ServerStream
}

type portInfoGetPortInfoServer struct {
	grpc.ServerStream
}

func (x *portInfoGetPortInfoServer) Send(m *PortInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PortInfo_ServiceDesc is the grpc.ServiceDesc for PortInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortInfo",
	HandlerType: (*PortInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPortInfo",
			Handler:       _PortInfo_GetPortInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "port-service.proto",
}
